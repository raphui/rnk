export

CONFIG := $(KERNEL_BASE)/.config
ifneq ($(CONFIG),)
include $(CONFIG)
endif

MCPU=cortex-m4

INCLUDES	+= -I$(KERNEL_BASE)/include
INCLUDES	+= -I$(KERNEL_BASE)/boards
INCLUDES	+= -I$(KERNEL_BASE)/lib
INCLUDES	+= -include $(KERNEL_BASE)/config.h

CFLAGS  :=  -Wall -fno-builtin -ffunction-sections -fomit-frame-pointer
CFLAGS += -mcpu=$(MCPU) -mthumb -nostdlib $(INCLUDES)
CFLAGS +=  -fno-common -mlong-calls

ifeq ($(CONFIG_ELF_LOADER),y)
CFLAGS +=  -mword-relocations
else
CFLAGS += -msingle-pic-base -fno-inline -fPIE -mno-pic-data-is-text-relative
endif


LDFLAGS	:= -g $(INCLUDES) -nostartfiles -nostdlib #-Wl,--gc-sections
LDFLAGS += -mcpu=$(MCPU) -mthumb -fno-common

ifeq ($(CONFIG_ELF_LOADER),y)
LDFLAGS += -r -Bsymbolic -mcpu=$(MCPU) -mthumb
else
LDFLAGS += -Wl,--unresolved-symbols=ignore-in-object-files -Wl,--emit-relocs
endif

LD_SCRIPT = $(APPS_BASE)/apps.ld
OBJS_DIR := $(KERNEL_BASE)/tools/objs

ifeq (${MAKELEVEL}, 1)

.PHONY: all clean

all:
	@-rm -f objects.lst
	@-rm -f extra_objects.lst
	$(MAKE) -f Makefile.common dir=$(dir) all
	$(CC) -T$(LD_SCRIPT) -o $(dir)/$(app) \
		`find $(OBJS_DIR) -name "*.o" -print0 | tr '\0' ' '` $(LDFLAGS)
ifeq ($(CONFIG_RFLAT_LOADER), y)
	$(RFLAT) $(dir)/$(app) $(dir)/$(app).bin
endif
 
include $(wildcard *.d)
 
clean:
	$(MAKE) -f Makefile.common dir=$(APPS_BASE) $@
 
endif

ifndef VERBOSE
.SILENT:
endif
